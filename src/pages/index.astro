---
import "../styles/global.css"
import "../styles/elements.css"
import "../styles/classes.css"
import App from "../components/App";
import jwt from "jsonwebtoken";
import jwksClient from "jwks-rsa";
import { kv } from "../config/kv.connection";
import { v4 as uuidv4 } from "uuid";

const url = new URL(Astro.request.url);
const baseUrl = url.origin;


//get current URL from address bar
const currentUrl = Astro.request.url;
//console.log(currentUrl)

//logic to handle callback from auth0
const code = new URL(currentUrl).searchParams?.get("code")
const state = new URL(currentUrl).searchParams?.get("state")
const storedState = Astro.cookies.get("auth0_state")?.value

//console.log(state, storedState, code)
if(!code || (state != storedState)){
	const sessionCookie = Astro.cookies.get("session")?.value
	if(sessionCookie){
		if (!await kv.get(sessionCookie)) {
			Astro.cookies.set("session", "nop", {
				httpOnly: true,
				expires: new Date("December 17, 1995 03:24:00"),
				path: "/",
			});
			return Astro.redirect("/signin")
		} 
	} else {
		Astro.cookies.delete("auth0_state", { path: "/" });
		return Astro.redirect("/signin")
	}
}
//console.log("Sending:", JSON.stringify({ code }));
  if (!code) {
    return new Response("Invalid code", { status: 302 });
  }
  //console.log("Received Code:", code);
  const tokenUrl = "https://dev-2mxcro8letr8o7ed.us.auth0.com/oauth/token";
  const formData = new URLSearchParams();
  formData.append("grant_type", "authorization_code");
  formData.append("client_id", process.env.AUTH0_CLIENT_ID);
  formData.append("client_secret", process.env.AUTH0_CLIENT_SECRET);
  formData.append("redirect_uri", process.env.AUTH0_CALLBACK_URL);
  formData.append("code", code);

  const fetchToken = await fetch(tokenUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: formData,
  });

  const fetchTokenRes = await fetchToken.json();
  //gives us access_token, id_token, scope, expires_in, token_type
  //console.log("fetch token res", fetchToken.status);
  const access_token = fetchTokenRes.access_token;
  const id_token = fetchTokenRes.id_token;
  //console.log(access_token);
  //TODO: store id token in kv

  const client = jwksClient({
    jwksUri: "https://dev-2mxcro8letr8o7ed.us.auth0.com/.well-known/jwks.json",
  });

  // Function to get the signing key
  function getKey(header, callback) {
    client.getSigningKey(header.kid, (err, key) => {
      if (err) {
        return callback(err);
      }
      const signingKey = key?.getPublicKey();
      callback(null, signingKey);
    });
  }

  // Verify the token
  async function verifyToken(idToken: string): Promise<unknown> {
    return new Promise((resolve, reject) => {
      jwt.verify(idToken, getKey, {}, (err, decoded) => {
        if (err) {
          reject(new Error(`Token verification failed: ${err.message}`));
        } else {
          resolve(decoded);
        }
      });
    });
  }

  const userInfo = await verifyToken(id_token);
  //console.log(userInfo);
  const session = uuidv4().toString();
  await kv.set(session, id_token);
  Astro.cookies.set("session", session, {
    httpOnly: true,
    maxAge: 5 * 24 * 60 * 60,
    path: "/",
  });
  console.log("Session cookie set:", session);
  Astro.redirect("/");

export const prerender = false
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<title>
			Touch Grass
		</title>
	</head>
	<body>
		<App client:load/>
		<footer>
			<ul class="flex justify-center">
				<li class="m-4">
					About Us
				</li>
				<li class="m-4">
					Privacy Policy
				</li>
			</ul>
			<p id="copyright" class="copyright justify-self-center">
				&copy;Touch Grass. All Rights Reserved.
			</p>
		</footer>
	</body>
</html>